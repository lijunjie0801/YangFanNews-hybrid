

/* 验证是否为iphone5  */
#define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)


//#define SCREEN_HEIGHT ((iPhone5 == YES)? 568 : 480)

/* 获取屏幕尺寸 用于兼容iphone5 */
#define WINDOWSCREEN_WIDTH      320
#define WINDOWSCREEN_HEIGHT     SCREEN_HEIGHT

/* 获取显示屏幕的尺寸 去除电池条高度 */
#define VIEWSCREEN_WIDTH        320
#define VIEWSCREEN_HEIGHT       ((IOS_VERSION_7==1)?(SCREEN_HEIGHT - 64):(SCREEN_HEIGHT - 64))
/* 获取显示屏幕的尺寸*/
#define kScreen_Bounds [UIScreen mainScreen].bounds
#define kScreen_Height [UIScreen mainScreen].bounds.size.height
#define kScreen_Width [UIScreen mainScreen].bounds.size.width

/* ios7尺寸 */

#define VIEWSCREEN_IOS7_Y ((IOS_VERSION_7)==1?64:0)
#define TOPTAB_IOS7_Y ((IOS_VERSION_7)==1?49:49)

/* 是不是IPhone5 */
#define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)

//16进制color 使用方法：HEXCOLOR(0xffffff)
#define HEXCOLOR(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]

/* 数组取值 */
#define OBJECT_ATINDEX(arry) arry.count>0?[arry objectAtIndex:0]:nil

/* 安全释放变量 release + nil */
#define RELEASE_SAFELY(__POINTER) { [__POINTER release]; __POINTER = nil; }

/* 防止空变量 nil -> @"" */
#define STRING_NIL_TO_NONE(__POINTER) if (__POINTER == nil||[__POINTER isEqualToString:@"(null)"]){__POINTER = @"";}

/* 判定字符串是否为空 */
#define STRING_ISNIL(__POINTER) (__POINTER == nil || [__POINTER isEqualToString:@""]||[__POINTER isEqualToString:@"(null)"])?YES:NO
#define STRING_ISNOTNIL(__POINTER) (__POINTER == nil || [__POINTER isEqualToString:@""]||[__POINTER isEqualToString:@"(null)"])?NO:YES

/* 打印BOOL值 */
#define NSLOG_BOOL(_bool) { NSLog(@"_bool = %@",(_bool == YES)?@"YES":@"NO"); }

/* 自定义NSLog */
#ifdef DEBUG
#define NSLog NSLog(@"[%s] [%s] [%d] ",strrchr(__FILE__,'/'), __FUNCTION__, __LINE__);NSLog
#else
//#define NSLog(...)
#endif
//
///* 弹出alert形式NSLog */
#ifdef DEBUG
#define ULog(fmt, ...)  { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"%s\n [Line %d] ", __PRETTY_FUNCTION__, __LINE__] message:[NSString stringWithFormat:fmt, ##__VA_ARGS__]  delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil]; [alert show]; }
#else
//#define ULog(...)
#endif

/* 设备类型和方向 */
#define UI_USER_INTERFACE_IDIOM() ([[UIDevice currentDevice] respondsToSelector:@selector(userInterfaceIdiom)] ? [[UIDevice currentDevice] userInterfaceIdiom] : UIUserInterfaceIdiomPhone)

#define UIDeviceOrientationIsPortrait(orientation)  ((orientation) == UIDeviceOrientationPortrait || (orientation) == UIDeviceOrientationPortraitUpsideDown)
#define UIDeviceOrientationIsLandscape(orientation) ((orientation) == UIDeviceOrientationLandscapeLeft || (orientation) == UIDeviceOrientationLandscapeRight)

/* 获取数组元素 */


/* performSelector ARC警告问题
 
 如果没有返回结果，可以直接按如下方式调用：
 SuppressPerformSelectorLeakWarning([_target performSelector:_action withObject:self]);
 
 如果要返回结果，可以按如下方式调用:
 id result;SuppressPerformSelectorLeakWarning( result =[_target performSelector:_action withObject:self]);
 */
#define SuppressPerformSelectorLeakWarning(Stuff) \
do { \
_Pragma("clang diagnostic push") \
_Pragma("clang diagnostic ignored \"-Warc-performSelector-leaks\"") \
Stuff; \
_Pragma("clang diagnostic pop") \
} while (0)


/* 判断字符串是否为空 如果为空 则置为@"" */
#define ISSTRINGCLASS(IPHONESTR) [[IPHONESTR class] isSubclassOfClass:[NSString class]] ? YES:NO
#define ISNILSTRING(IPHONESTR)  (ISSTRINGCLASS(IPHONESTR) == YES) ? ((IPHONESTR == nil || [IPHONESTR isEqualToString:@""]) ? ((IPHONESTR = @""), YES):NO):YES
#define ISNOTNILSTR(IPHONESTR) (ISNILSTRING(IPHONESTR) == YES) ? NO:YES

/* 非空 字典 */
#define ISNOTNILDIC(IPHONEDIC) ([IPHONEDIC isKindOfClass:[NSDictionary class]] && IPHONEDIC != nil)? YES:NO

/* 获取系统版本号 */
#define IOS_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]

#define IOS_MAX_VERSION6 ([[UIDevice currentDevice].systemVersion floatValue] < 7.0)? 1:0

#define IOS_VERSION_5 ([[UIDevice currentDevice].systemVersion floatValue] < 6.0)? 1:0
#define IOS_VERSION_6 (([[UIDevice currentDevice].systemVersion floatValue] >= 6.0 && [[UIDevice currentDevice].systemVersion floatValue]<7.0))?1:0
#define IOS_VERSION_7 ([[UIDevice currentDevice].systemVersion floatValue] >= 7.0)?1:0

/* ios7 以上版本 */
#define IOS_VERSION_ABOVE_7 ([[UIDevice currentDevice].systemVersion floatValue] >= 7.0)?1:0

#define IsIOS7 ([[[[UIDevice currentDevice] systemVersion] substringToIndex:1] intValue]>=7)
#define CGRECT_NO_NAV(x,y,w,h) CGRectMake((x), (y+(IsIOS7?20:0)), (w), (h))
#define CGRECT_HAVE_NAV(x,y,w,h) CGRectMake((x), (y+(IsIOS7?64:0)), (w), (h))

/* 判断屏幕 */
#define IS_RETINA (SCREEN_HEIGHT == 480) ? 1:0

/* 系统版本号判定 是否为6.0以上版本 */
#define DEVICEVALUE6 ([[UIDevice currentDevice].systemVersion floatValue] >= 6.0)? 1:0

/* 5.0和6.0两种系统api兼容  ( (DEVICEVALUE6==1)? NSTextAlignmentCenter : UITextAlignmentCenter )*/
/* 文本类 居左、中、右 */
#ifdef DEVICEVALUE6
# define TEXT_ALIGN_LEFT NSTextAlignmentLeft
# define TEXT_ALIGN_CENTER NSTextAlignmentCenter
# define TEXT_ALIGN_RIGHT NSTextAlignmentRight
#else
# define TEXT_ALIGN_LEFT NSTextAlignmentLeft
# define TEXT_ALIGN_CENTER NSTextAlignmentCenter
# define TEXT_ALIGN_RIGHT UITextAlignmentRight
#endif

/* UILineBreakModeWordWrap  NSLineBreakByCharWrapping  */
#ifdef DEVICEVALUE6
# define LINE_BREAKMODE_WORDWRAP NSLineBreakByTruncatingTail
#else
# define LINE_BREAKMODE_WORDWRAP UILineBreakModeWordWrap
#endif

/* NSLineBreakByCharWrapping  NSLineBreakByCharWrapping  */
#ifdef DEVICEVALUE6
# define LINE_BREAKMODE_CHARACTERWRAP NSLineBreakByCharWrapping
#else
# define LINE_BREAKMODE_CHARACTERWRAP NSLineBreakByCharWrapping
#endif

//区分模拟器和真机
#if TARGET_OS_IPHONE
//iPhone Device
#endif

#if TARGET_IPHONE_SIMULATOR
//iPhone Simulator
#endif

//ARC
#if __has_feature(objc_arc)
//compiling with ARC
#else
// compiling without ARC
#endif


// Time
#define TT_MINUTE 60
#define TT_HOUR   (60 * TT_MINUTE)
#define TT_DAY    (24 * TT_HOUR)
#define TT_5_DAYS (5 * TT_DAY)
#define TT_WEEK   (7 * TT_DAY)
#define TT_MONTH  (30.5 * TT_DAY)
#define TT_YEAR   (365 * TT_DAY)

/* 判定系统版本 */
#if __IPHONE_OS_VERSION_MAX_ALLOWED == __IPHONE_6_0

#else

#endif

//当前设备的屏幕宽度
#define SCREEN_WIDTH   [[UIScreen mainScreen] bounds].size.width

//当前设备的屏幕高度
#define SCREEN_HEIGHT   [[UIScreen mainScreen] bounds].size.height


/* 整体列表 */
#define TABLEVIEW_X 0
#define TABLEVIEW_Y 0
#define TABLEVIEW_WIDTH 320
#define TABLEVIEW_HEIGHT VIEWSCREEN_HEIGHT - 44 - 49


